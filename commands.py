from telebot import types
from models import Product, Customer, Order, ServiceRequest
from database import get_db
from config import ADMIN_CHAT_ID

def setup_commands(bot):
    @bot.message_handler(commands=['start'])
    def start(message):
        db = next(get_db())
        customer = db.query(Customer).filter(Customer.telegram_id == message.from_user.id).first()
        
        if not customer:
            customer = Customer(
                telegram_id=message.from_user.id,
                name=message.from_user.first_name
            )
            db.add(customer)
            db.commit()
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('üì¶ –¢–æ–≤–∞—Ä—ã', 'üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
        markup.add('üîß –°–µ—Ä–≤–∏—Å', 'üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
        
        bot.send_message(
            message.chat.id,
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )

    @bot.message_handler(func=lambda message: message.text == 'üì¶ –¢–æ–≤–∞—Ä—ã')
    def show_products(message):
        db = next(get_db())
        products = db.query(Product).filter(Product.is_active == True).limit(10).all()
        
        if not products:
            bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        for product in products:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(
                "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", 
                callback_data=f"add_to_cart_{product.id}"))
            
            bot.send_message(
                message.chat.id,
                f"{product.name}\n–¶–µ–Ω–∞: {product.price} —Ä—É–±.\n–ù–∞ —Å–∫–ª–∞–¥–µ: {product.in_stock} —à—Ç.",
                reply_markup=markup
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('add_to_cart_'))
    def add_to_cart(call):
        product_id = int(call.data.split('_')[-1])
        db = next(get_db())
        
        product = db.query(Product).get(product_id)
        bot.answer_callback_query(call.id, f"{product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    @bot.message_handler(commands=['add_product'])
    def add_product_command(message):
        if message.from_user.id != ADMIN_CHAT_ID:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é")
            return
        
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        bot.register_next_step_handler(msg, process_product_name_step)

    def process_product_name_step(message):
        try:
            product_data = {'name': message.text}
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
            bot.register_next_step_handler(msg, process_product_price_step, product_data)
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

    def process_product_price_step(message, product_data):
        try:
            product_data['price'] = float(message.text)
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å—Ä–æ–∫ (–≤ –º–µ—Å—è—Ü–∞—Ö):")
            bot.register_next_step_handler(msg, process_product_warranty_step, product_data)
        except ValueError:
            msg = bot.send_message(message.chat.id, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(msg, process_product_price_step, product_data)
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

    def process_product_warranty_step(message, product_data):
        try:
            product_data['warranty_months'] = int(message.text)
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:")
            bot.register_next_step_handler(msg, process_product_stock_step, product_data)
        except ValueError:
            msg = bot.send_message(message.chat.id, "–°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(msg, process_product_warranty_step, product_data)
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

    def process_product_stock_step(message, product_data):
        try:
            product_data['in_stock'] = int(message.text)
            
            db = next(get_db())
            product = Product(
                name=product_data['name'],
                price=product_data['price'],
                warranty_months=product_data['warranty_months'],
                in_stock=product_data['in_stock']
            )
            db.add(product)
            db.commit()
            
            bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        except ValueError:
            msg = bot.send_message(message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(msg, process_product_stock_step, product_data)
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")